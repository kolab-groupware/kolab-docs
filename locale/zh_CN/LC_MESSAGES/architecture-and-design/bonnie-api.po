# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, Jeroen van Meeuwen
# This file is distributed under the same license as the Kolab Groupware package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Kolab Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-28 13:30+1300\n"
"PO-Revision-Date: 2014-11-28 00:36+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Chinese (China) (http://www.transifex.com/projects/p/kolab-"
"documentation/language/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/architecture-and-design/bonnie-api.rst:46
msgid "Bonnie Client API"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:50
msgid "Client-Server Communication"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:52
msgid ""
"While initially the Bonnie API will serve as a read-only service to respond "
"on concrete requests from clients to deliver object changelogs, the protocol "
"should remain capable of allowing a bi-directional communication between the "
"participating end-points."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:58
msgid "Technology"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:60
msgid ""
"The idea is to implement a stateless web service based on the JSON-RPC 2.0 "
"Protocol [#]_ using HTTPS as the underlying protocol."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:63
msgid "In this document, RPC calls will be specified in the following manner:"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:65
msgid "**Method**:"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:71
msgid "**Result**:"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:77
msgid ""
"For method arguments and results, JSON-like formatting is used to indicate "
"the data types."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:82
msgid "Client Authentication"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:84
msgid ""
"A connecting client must first authenticate itself in order to be allowed "
"for further interactions with the API. This is primarily meant to abort "
"unauthorized access to the web service from unknown clients in an early "
"stage of the communication. Client credentials consists of 3 parts:"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:89
msgid "Client-ID"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:90
msgid "Password"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:91
msgid "*Client Secret*"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:94
msgid "HTTP Authentication"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:96
msgid ""
"If the API requires HTTP authentication, every non-authenticated HTTP "
"request shall be responded with a ``401 Authentication Required`` response "
"which indicates that clients should send previously negotiated HTTP Basic "
"authentication headers with subsequent requests."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:101
msgid ""
"The Client-ID and the password are sent via Basic HTTP authentication to "
"identify the connecting client and to grant access on a transport layer "
"(HTTP) level."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:107
msgid "User Authentication"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:109
msgid ""
"Once the client is identified and authorized to use the Bonnie API, the "
"actual human user accessing data through the API needs to be identified. "
"This shall restrict access to stored data the requesting user is actually "
"permitted to read based on privileges and/or organizational structures."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:114
msgid ""
"Although the API is meant to be a stateless service, certain means to "
"restrict access are required because requests may (at least partially) be "
"initiated by a user-facing client and therefore should be proof to "
"manipulation."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:118
msgid ""
"With every request to an API method, the client shall supply the fully-"
"qualified identifier of the requesting user together with a hashed value "
"acting as a signature to prove the authenticity of the request. These values "
"are provided as custom headers in the HTTP request to the API:"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:128
msgid ""
"The signature shall be composed as a HMAC (SHA-256) value from the user "
"identifier and the full request payload using the *client secret* which is "
"never transmitted through this API."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:131
msgid "Generating Request Signatures"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:133
msgid "Compose the JSON string for the RPC call"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:135
msgid ""
"Concatenate the user identifier and the JSON string: ``data = user-"
"identifier \":\" json-string``"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:138
msgid ""
"Generate the hash value with the HMAC method using the SHA-256 algorithm and "
"the ``client-secret`` value."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:140
msgid ""
"Send the hash value in the HTTP header ``X-Request-Sign`` together with the "
"``X-Request-User`` header before the actual JSON-RPC payload."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:143
msgid ""
"Before processing the RPC command, the web service provider shall verify the "
"request signature and in case the signature doesn't match the payload, "
"reject the request with a JSON-RPC error code ``-32600`` indicating an "
"*invalid request*."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:150
msgid "Retrieving Object Changes"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:152
msgid ""
"The API exposes methods for every object type to get particular information "
"about the history of a given groupware object. Method names have the "
"following syntax:"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:158
msgid "*Example*:"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:166
msgid "Fetch created date and user"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:168
msgid ""
"*Method*: ``<object>.created ( uid: \"<object-uid>\"[, folder: \"<IMAP-"
"mailbox-identifier>\" ])``"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:170
#: ../../source/architecture-and-design/bonnie-api.rst:201
#: ../../source/architecture-and-design/bonnie-api.rst:220
#: ../../source/architecture-and-design/bonnie-api.rst:280
#: ../../source/architecture-and-design/bonnie-api.rst:299
msgid "*Result*:"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:181
msgid ""
"If no ``mailbox`` argument is provided, the object is searched in the given "
"user's folders with priority on personal namespace."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:183
#: ../../source/architecture-and-design/bonnie-api.rst:213
#: ../../source/architecture-and-design/bonnie-api.rst:237
msgid ""
"Date value is provided as ISO 8601 Date/Time including timezone information."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:185
#: ../../source/architecture-and-design/bonnie-api.rst:316
msgid "*Example result*:"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:197
msgid "Fetch last change information"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:199
msgid ""
"*Method*: ``<object>.lastmodified ( uid: \"<object-uid>\"[, folder: \"<IMAP-"
"folder-path>\" ] )``"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:216
msgid "Full Changelog"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:218
msgid ""
"*Method*: ``<object>.changelog ( uid: \"<object-uid>\"[, folder: \"<IMAP-"
"folder-path>\" ] )``"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:239
msgid ""
"The ``op`` (operation) property reflects the IMAP operation performed and "
"can contain one of the following values: ``APPEND, MOVE, DELETE``."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:241
msgid "*Example Result*:"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:276
msgid "Retrieving an Old Revision"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:278
msgid ""
"*Method*: ``<object>.get ( uid: \"<object-uid>\", rev:\"<revision>\"[, "
"folder: \"<IMAP-folder-path>\" ] )``"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:291
msgid "Retrieving Diffs between two Object Revisions"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:293
msgid ""
"Generating and applying diffs in XML documents is not a trivial topic and if "
"we'd decide to go down the full diff route, we should use existing tools to "
"generate those diffs. But the benefit of a real XML diff is limited in terms "
"of displaying changes to groupware objects because in order to generate a "
"meaningful diff view, the semantics of the individual XML nodes within a "
"certain groupware object are important and pure xml-level differences don't "
"simplify the work of a client."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:295
msgid ""
"Thus loading full version of different revisions is likely simpler for "
"clients to derive changes than looking at a XML diff. But in order to "
"optimize the exchanged payload, the API could provide a diff on interpreted "
"\"properties\" of a groupware object:"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:297
msgid ""
"*Method*: ``<object>.diff ( uid: \"<object-uid>\", rev:\"<rev1>:<rev2>\"[, "
"folder: \"<IMAP-folder-path>\" ] )``"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:354
msgid ""
"Properties are top-level nodes from the Kolab XML Format 3.0 and property "
"names used in the diff data match the ``property-*`` identifiers as "
"described in the XML Format Specification [#]_."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:356
msgid ""
"If a property is a struct, the ``new`` parameter only denotes the attributes "
"which differ from the ``old`` value. If an attribute was removed, it shall "
"be represented as an empty string."
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:360
msgid "Footnotes"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:363
msgid "JSON-RPC 2.0 Specification: http://www.jsonrpc.org/specification"
msgstr ""

#: ../../source/architecture-and-design/bonnie-api.rst:367
msgid ""
"XML Format Specification http://wiki.kolab.org/User:Mollekopf/Drafts/KEP:17"
msgstr ""
